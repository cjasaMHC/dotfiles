############################
#  _
# | | By Theo
# | |_ _ __ ___  _   ___  __
# | __| '_ ` _ \| | | \ \/ /
# | |_| | | | | | |_| |>  <
#  \__|_| |_| |_|\__,_/_/\_\
#############################

# {{{ Basic settings 
set -g default-terminal "$TERM" # "xterm-256color" or "tmux-256color" works too
set -ga terminal-overrides ",xterm-256color:RGB" # $TERM = xterm-256color, enable RGB color no matter what
set -g mouse on
set -g allow-rename off # do not let external program rename your custom window name
set -g history-limit 10000
set -g base-index 1 # Oh no anti programmer behavior oh no
set -g escape-time 50 # Default 500 milsec, because back in the day escape sequence blah blah
set-window-option -g pane-base-index 1
# }}}

# {{{ Keybindings
# bind or bind-key: Bind key
# bind -n: Bind without prefix
# bind -r: Execute functionality multiple times with multiple key presses (w/o retyping prefix)
# Source code where the default keys are defined:
# https://github.com/tmux/tmux/blob/master/key-bindings.c#L349

# Fav default bindings:
# "bind -N 'Break pane to a new window' ! { break-pane }",
# "bind -N 'Select window 0' 0 { select-window -t:=0 }",
# "bind -N 'Select window 1' 1 { select-window -t:=1 }",
# ...
# "bind -N 'Select window 9' 9 { select-window -t:=9 }",
# "bind -N 'Prompt for a command' : { command-prompt }",
# "bind -N 'Select the next pane' o { select-pane -t:.+ }",
# "bind -N 'Choose a window from a list' w { choose-tree -Zw }",
# "bind -N 'Zoom the active pane' z { resize-pane -Z }",

# Unbinds
unbind-key C-b # "bind -N 'Send the prefix key' C-b { send-prefix }",
unbind '"' # "bind -N 'Split window vertically' '\"' { split-window }",
unbind % # "bind -N 'Split window horizontally' % { split-window -h }",
unbind & # "bind -N 'Kill current window' & { confirm-before -p\"kill-window #W? (y/n)\" kill-window }",
unbind - # "bind -N 'Delete the most recent paste buffer' - { delete-buffer }",
unbind . # "bind -N 'Move the current window' . { command-prompt -T target { move-window -t '%%' } }",
unbind ? # "bind -N 'List key bindings' ? { list-keys -N }",
unbind [ # "bind -N 'Enter copy mode' [ { copy-mode }",
unbind ] # "bind -N 'Paste the most recent paste buffer' ] { paste-buffer -p }",
unbind c # "bind -N 'Create a new window' c { new-window }",
unbind l # "bind -N 'Select the previously current window' l { last-window }",
unbind m # "bind -N 'Toggle the marked pane' m { select-pane -m }",
unbind q # "bind -N 'Display pane numbers' q { display-panes }",
unbind t # "bind -N 'Show a clock' t { clock-mode }",
unbind r # "bind -N 'Redraw the current client' r { refresh-client }",
unbind s # "bind -N 'Choose a session from a list' s { choose-tree -Zs }",
unbind x # "bind -N 'Kill the active pane' x { confirm-before -p\"kill-pane #P? (y/n)\" kill-pane }",
unbind '{' # "bind -N 'Swap the active pane with the pane above' '{' { swap-pane -U }",
unbind '}' # "bind -N 'Swap the active pane with the pane below' '}' { swap-pane -D }",

# Reloading
bind C-r source-file ~/.tmux.conf \; display-message "Reloading ~/.tmux.conf"

# Prefix
set -g prefix C-a
bind-key C-a send-prefix # C-a C-a sends C-a

# Pane
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind r swap-pane -U
bind x swap-pane -D
bind e command-prompt -I'#W' { rename-window -- '%%' }

# Pane splits: tmux def of vertical and horizontal split is opposite of Vim
bind s split-window -v -c "#{pane_current_path}"
bind v split-window -h -c "#{pane_current_path}"

# Resizing panes
bind -r < resize-pane -L 5
bind -r - resize-pane -D 5
bind -r + resize-pane -U 5
bind -r > resize-pane -R 5

# Moving panes between windows
# ":1": Pane 1, "1": Session 1
bind C-s command-prompt -p "Send pane to:"  "join-pane -t :'%%'"
bind C-j command-prompt -p "Join pane from:"  "join-pane -s :'%%'"

bind C-h select-pane -L
bind C-j select-pane -D
bind C-k select-pane -U
bind C-l select-pane -R

# Windows
bind t new-window -c "#{pane_current_path}"
# Remove killing window since killing pane can replace its job
bind q confirm-before -p "Kill pane #P? (y/n)" kill-pane
bind [ previous-window
bind ] next-window
bind '{' swap-window -t :-1 \; previous-window
bind '}' swap-window -t :+1 \; next-window
bind m command-prompt -T target { move-window -t '%%' }
# Delete colon and type session name to move across sessions
#bind m command-prompt -I":" "move-window -t '%%' \; select-window -t '%%'"

# Open this config as a helpdoc since list-keys does not work for custom keys
bind ? display-popup -E -h 70% -w 70% "cat ~/.tmux.conf | less" # -E for exec
# }}}

# {{{ Copy mod
bind c copy-mode

set-window-option -g mode-keys vi

# $ tmux list-keys | grep "send-keys -X cancel"
# shows that ESC is bound to canc in copy-mode but not in copy-mode-vi
# Copy mode uses a separate command sets, so we have to use send-keys -X
bind -T copy-mode-vi Escape send-keys -X cancel

unbind -T copy-mode-vi Space;
bind -T copy-mode-vi v send-keys -X begin-selection
unbind -T copy-mode-vi Enter;
bind -T copy-mode-vi y send-keys -X copy-selection
# }}}

# Nightfox colors for Tmux
# Style: nightfox
# Upstream: https://github.com/edeneast/nightfox.nvim/raw/main/extra/nightfox/nightfox.tmux
set -g mode-style "fg=#131a24,bg=#aeafb0"
set -g message-style "fg=#131a24,bg=#aeafb0"
set -g message-command-style "fg=#131a24,bg=#aeafb0"
set -g pane-border-style "fg=#aeafb0"
set -g pane-active-border-style "fg=#719cd6"
set -g status "on"
set -g status-justify "left"
set -g status-style "fg=#aeafb0,bg=#131a24"
set -g status-left-length "100"
set -g status-right-length "100"
set -g status-left-style NONE
set -g status-right-style NONE
set -g status-left "#[fg=#131a24,bg=#719cd6,bold] \uebc8  #[fg=#719cd6,bg=#131a24,nobold,nounderscore,noitalics]"
set -g status-right ""

# set -g status-right "#[fg=#131a24,bg=#131a24,nobold,nounderscore,noitalics]#[fg=#719cd6,bg=#131a24] #{prefix_highlight} #[fg=#aeafb0,bg=#131a24,nobold,nounderscore,noitalics]#[fg=#131a24,bg=#aeafb0] %Y-%m-%d  %I:%M %p #[fg=#719cd6,bg=#aeafb0,nobold,nounderscore,noitalics]#[fg=#131a24,bg=#719cd6,bold] #h "
setw -g window-status-activity-style "underscore,fg=#71839b,bg=#131a24"
setw -g window-status-separator ""
setw -g window-status-style "NONE,fg=#71839b,bg=#131a24"
setw -g window-status-format "#[fg=#131a24,bg=#131a24,nobold,nounderscore,noitalics] #[default] #I  #W #F #[fg=#131a24,bg=#131a24,nobold,nounderscore,noitalics]"
setw -g window-status-current-format "#[fg=#131a24,bg=#aeafb0,nobold,nounderscore,noitalics]#[fg=#131a24,bg=#aeafb0,bold] #I | #W #F #[fg=#aeafb0,bg=#131a24,nobold,nounderscore,noitalics]"


# '@pane-is-vim' is a pane-local option that is set by the plugin on load,
# and unset when Neovim exits or suspends; note that this means you'll probably
# not want to lazy-load smart-splits.nvim, as the variable won't be set until
# the plugin is loaded

# Smart pane switching with awareness of Neovim splits.
bind-key -n C-h if -F "#{@pane-is-vim}" 'send-keys C-h'  'select-pane -L'
bind-key -n C-j if -F "#{@pane-is-vim}" 'send-keys C-j'  'select-pane -D'
bind-key -n C-k if -F "#{@pane-is-vim}" 'send-keys C-k'  'select-pane -U'
bind-key -n C-l if -F "#{@pane-is-vim}" 'send-keys C-l'  'select-pane -R'

# Alternatively, if you want to disable wrapping when moving in non-neovim panes, use these bindings
# bind-key -n C-h if -F '#{@pane-is-vim}' { send-keys C-h } { if -F '#{pane_at_left}'   '' 'select-pane -L' }
# bind-key -n C-j if -F '#{@pane-is-vim}' { send-keys C-j } { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
# bind-key -n C-k if -F '#{@pane-is-vim}' { send-keys C-k } { if -F '#{pane_at_top}'    '' 'select-pane -U' }
# bind-key -n C-l if -F '#{@pane-is-vim}' { send-keys C-l } { if -F '#{pane_at_right}'  '' 'select-pane -R' }

# Smart pane resizing with awareness of Neovim splits.
bind-key -n M-h if -F "#{@pane-is-vim}" 'send-keys M-h' 'resize-pane -L 3'
bind-key -n M-j if -F "#{@pane-is-vim}" 'send-keys M-j' 'resize-pane -D 3'
bind-key -n M-k if -F "#{@pane-is-vim}" 'send-keys M-k' 'resize-pane -U 3'
bind-key -n M-l if -F "#{@pane-is-vim}" 'send-keys M-l' 'resize-pane -R 3'

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if -F \"#{@pane-is-vim}\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if -F \"#{@pane-is-vim}\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l
